# -*- coding: utf-8 -*-
"""ABAP-F.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NBmNSNM5_4DQe-6oFaiK8zMQcqCVAMgh
"""

import streamlit as st
import pandas as pd

# Datos iniciales (en memoria - podrías guardarlos en un CSV/SQLite para persistencia)
if 'catalogo_cuentas' not in st.session_state:
    st.session_state['catalogo_cuentas'] = pd.DataFrame(columns=['Código', 'Nombre', 'Tipo'])

if 'polizas' not in st.session_state:
    st.session_state['polizas'] = pd.DataFrame(columns=['Folio', 'Fecha', 'Concepto', 'Cuenta', 'Debe', 'Haber'])

if 'configuracion' not in st.session_state:
    st.session_state['configuracion'] = {
        "Empresa": "Mi Empresa S.A. de C.V.",
        "RFC": "XAXX010101000"
    }

# Menú lateral
menu = st.sidebar.selectbox("Menú", [
    "Inicio",
    "Catálogo de Cuentas",
    "Módulo de Pólizas",
    "Consultas (Auxiliares y Balanzas)",
    "Estado de Resultados",
    "Balance General",
    "Configuración"
])

# Función para mostrar balances (balanza de comprobación)
def mostrar_balanza():
    if st.session_state['polizas'].empty:
        st.warning("No hay movimientos registrados.")
        return
    balanza = st.session_state['polizas'].groupby('Cuenta').agg({'Debe': 'sum', 'Haber': 'sum'}).reset_index()

    # Mostrar la balanza
    st.dataframe(balanza)

    # Mostrar las sumas finales de debe y haber
    total_debe = balanza['Debe'].sum()
    total_haber = balanza['Haber'].sum()

    st.write("### Totales")
    st.write(f"Total Debe: {total_debe:.2f}")
    st.write(f"Total Haber: {total_haber:.2f}")

# Función para mostrar el estado de resultados
def mostrar_estado_resultados():
    if st.session_state['polizas'].empty:
        st.warning("No hay movimientos registrados.")
        return

    # Filtrar las cuentas de ingresos y gastos
    ingresos = st.session_state['catalogo_cuentas'][st.session_state['catalogo_cuentas']['Tipo'] == 'Ingresos']['Código']
    gastos = st.session_state['catalogo_cuentas'][st.session_state['catalogo_cuentas']['Tipo'] == 'Gastos']['Código']

    # Sumar los movimientos de ingresos y gastos
    ingresos_sum = st.session_state['polizas'][st.session_state['polizas']['Cuenta'].isin(ingresos)].agg({'Debe': 'sum', 'Haber': 'sum'})
    gastos_sum = st.session_state['polizas'][st.session_state['polizas']['Cuenta'].isin(gastos)].agg({'Debe': 'sum', 'Haber': 'sum'})

    # Calcular el estado de resultados
    ingresos_totales = ingresos_sum['Haber'] - ingresos_sum['Debe']
    gastos_totales = gastos_sum['Debe'] - gastos_sum['Haber']
    utilidad = ingresos_totales - gastos_totales

    st.write("### Estado de Resultados")
    st.write(f"Ingresos Totales: {ingresos_totales:.2f}")
    st.write(f"Gastos Totales: {gastos_totales:.2f}")
    st.write(f"Utilidad Neta: {utilidad:.2f}")

# Función para mostrar el balance general
def mostrar_balance_general():
    if st.session_state['polizas'].empty:
        st.warning("No hay movimientos registrados.")
        return

    # Filtrar las cuentas de activos, pasivos y capital
    activos = st.session_state['catalogo_cuentas'][st.session_state['catalogo_cuentas']['Tipo'] == 'Activo']['Código']
    pasivos = st.session_state['catalogo_cuentas'][st.session_state['catalogo_cuentas']['Tipo'] == 'Pasivo']['Código']
    capital = st.session_state['catalogo_cuentas'][st.session_state['catalogo_cuentas']['Tipo'] == 'Capital']['Código']

    # Sumar los movimientos de cada tipo de cuenta
    activos_sum = st.session_state['polizas'][st.session_state['polizas']['Cuenta'].isin(activos)].agg({'Debe': 'sum', 'Haber': 'sum'})
    pasivos_sum = st.session_state['polizas'][st.session_state['polizas']['Cuenta'].isin(pasivos)].agg({'Debe': 'sum', 'Haber': 'sum'})
    capital_sum = st.session_state['polizas'][st.session_state['polizas']['Cuenta'].isin(capital)].agg({'Debe': 'sum', 'Haber': 'sum'})

    # Calcular el balance
    total_activos = activos_sum['Debe'] - activos_sum['Haber']
    total_pasivos = pasivos_sum['Haber'] - pasivos_sum['Debe']
    total_capital = capital_sum['Haber'] - capital_sum['Debe']

    st.write("### Balance General")
    st.write(f"Total Activos: {total_activos:.2f}")
    st.write(f"Total Pasivos: {total_pasivos:.2f}")
    st.write(f"Total Capital: {total_capital:.2f}")

# Módulo de Pólizas
elif menu == "Módulo de Pólizas":
    st.title("Módulo de Pólizas")

    st.write("### Pólizas Registradas")
    st.dataframe(st.session_state['polizas'])

    folios_existentes = st.session_state['polizas']['Folio'].unique().tolist()
    if folios_existentes:
        folio_seleccionado = st.selectbox("Selecciona un folio para eliminar", folios_existentes)
        if st.button("Eliminar Póliza Seleccionada"):
            st.session_state['polizas'] = st.session_state['polizas'][st.session_state['polizas']['Folio'] != folio_seleccionado]
            st.success("Póliza eliminada correctamente.")

    if st.button("Eliminar todas las pólizas"):
        st.session_state['polizas'] = pd.DataFrame(columns=['Folio', 'Fecha', 'Concepto', 'Cuenta', 'Debe', 'Haber'])
        st.warning("Se eliminaron todas las pólizas.")