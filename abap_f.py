# -*- coding: utf-8 -*-
"""ABAP-F.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NBmNSNM5_4DQe-6oFaiK8zMQcqCVAMgh
"""

import streamlit as st
import pandas as pd

# Inicializar datos en memoria
if 'catalogo_cuentas' not in st.session_state:
    st.session_state['catalogo_cuentas'] = pd.DataFrame(columns=['Código', 'Nombre', 'Tipo'])
if 'polizas' not in st.session_state:
    st.session_state['polizas'] = pd.DataFrame(columns=['Folio', 'Fecha', 'Concepto', 'Cuenta', 'Debe', 'Haber'])
if 'configuracion' not in st.session_state:
    st.session_state['configuracion'] = {"Empresa": "Mi Empresa S.A. de C.V.", "RFC": "XAXX010101000"}

# Menú lateral
menu = st.sidebar.selectbox("Menú", [
    "Inicio", "Catálogo de Cuentas", "Módulo de Pólizas", "Consultas (Auxiliares y Balanzas)",
    "Estado de Resultados", "Balance General", "Configuración", "Simulación ABAP FI"])

# Función de simulación de ejecución de comandos ABAP
def ejecutar_comando_abap(comando):
    if "SELECT" in comando:
        return st.session_state['polizas']
    return pd.DataFrame()

# Inicio
if menu == "Inicio":
    st.image("UNRC.png", caption="Universidad Nacional Rosario Castellanos", width=550)
    st.title("Sistema Contable de Información Financiera")
    st.write("Bienvenido al Sistema Contable para la UCA de Sistemas Contables de Información Financiera.")

# Catálogo de Cuentas
elif menu == "Catálogo de Cuentas":
    st.title("Catálogo de Cuentas")
    with st.form("Alta de Cuenta"):
        codigo = st.text_input("Código")
        nombre = st.text_input("Nombre")
        tipo = st.selectbox("Tipo", ["Activo", "Pasivo", "Capital", "Ingresos", "Gastos"])
        submit = st.form_submit_button("Agregar Cuenta")
        if submit:
            nueva_cuenta = pd.DataFrame([[codigo, nombre, tipo]], columns=['Código', 'Nombre', 'Tipo'])
            st.session_state['catalogo_cuentas'] = pd.concat([st.session_state['catalogo_cuentas'], nueva_cuenta], ignore_index=True)
            st.success("Cuenta agregada correctamente")
    st.dataframe(st.session_state['catalogo_cuentas'])

# Módulo de Pólizas
elif menu == "Módulo de Pólizas":
    st.title("Módulo de Pólizas")
    with st.form("Alta de Póliza"):
        folio = st.text_input("Folio")
        fecha = st.date_input("Fecha")
        concepto = st.text_input("Concepto")
        cuenta = st.selectbox("Cuenta", st.session_state['catalogo_cuentas']['Código'].tolist())
        debe = st.number_input("Debe", min_value=0.0, format="%.2f")
        haber = st.number_input("Haber", min_value=0.0, format="%.2f")
        submit = st.form_submit_button("Agregar Póliza")
        if submit:
            nueva_poliza = pd.DataFrame([[folio, fecha, concepto, cuenta, debe, haber]],
                                        columns=['Folio', 'Fecha', 'Concepto', 'Cuenta', 'Debe', 'Haber'])
            st.session_state['polizas'] = pd.concat([st.session_state['polizas'], nueva_poliza], ignore_index=True)
            st.success("Póliza registrada correctamente")
    st.dataframe(st.session_state['polizas'])

# Consultas y Balanzas
elif menu == "Consultas (Auxiliares y Balanzas)":
    st.title("Consultas")
    cuenta_seleccionada = st.selectbox("Selecciona una cuenta", st.session_state['catalogo_cuentas']['Código'].tolist())
    if cuenta_seleccionada:
        auxiliar = st.session_state['polizas'][st.session_state['polizas']['Cuenta'] == cuenta_seleccionada]
        st.dataframe(auxiliar)

# Estado de Resultados
elif menu == "Estado de Resultados":
    st.title("Estado de Resultados")
    ingresos = st.session_state['catalogo_cuentas'][st.session_state['catalogo_cuentas']['Tipo'] == 'Ingresos']['Código']
    gastos = st.session_state['catalogo_cuentas'][st.session_state['catalogo_cuentas']['Tipo'] == 'Gastos']['Código']
    ingresos_sum = st.session_state['polizas'][st.session_state['polizas']['Cuenta'].isin(ingresos)].sum()
    gastos_sum = st.session_state['polizas'][st.session_state['polizas']['Cuenta'].isin(gastos)].sum()
    utilidad = ingresos_sum['Haber'] - ingresos_sum['Debe'] - (gastos_sum['Debe'] - gastos_sum['Haber'])
    st.write(f"Utilidad Neta: {utilidad:.2f}")

# Balance General
elif menu == "Balance General":
    st.title("Balance General")
    activos = st.session_state['catalogo_cuentas'][st.session_state['catalogo_cuentas']['Tipo'] == 'Activo']['Código']
    pasivos = st.session_state['catalogo_cuentas'][st.session_state['catalogo_cuentas']['Tipo'] == 'Pasivo']['Código']
    activos_sum = st.session_state['polizas'][st.session_state['polizas']['Cuenta'].isin(activos)].sum()
    pasivos_sum = st.session_state['polizas'][st.session_state['polizas']['Cuenta'].isin(pasivos)].sum()
    st.write(f"Total Activos: {activos_sum['Debe'] - activos_sum['Haber']:.2f}")
    st.write(f"Total Pasivos: {pasivos_sum['Haber'] - pasivos_sum['Debe']:.2f}")

# Configuración
elif menu == "Configuración":
    st.title("Configuración")
    empresa = st.text_input("Empresa", st.session_state['configuracion']['Empresa'])
    rfc = st.text_input("RFC", st.session_state['configuracion']['RFC'])
    if st.button("Guardar Configuración"):
        st.session_state['configuracion']['Empresa'] = empresa
        st.session_state['configuracion']['RFC'] = rfc
        st.success("Configuración guardada correctamente")
    st.json(st.session_state['configuracion'])

# Simulación de ABAP FI
elif menu == "Simulación ABAP FI":
    st.title("Consultas con Comandos ABAP")
    abap_comando = st.text_area("Ingrese su comando ABAP", "SELECT * FROM buchungen WHERE BELNR = '1001'")
    if st.button("Ejecutar Comando ABAP"):
        resultado = ejecutar_comando_abap(abap_comando)
        if not resultado.empty:
            st.dataframe(resultado)
        else:
            st.warning("No se encontraron resultados.")